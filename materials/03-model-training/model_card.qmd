---
title: "Model Card: your model title"
output:
  html_document
---

```{python}
#| echo: false
from IPython.display import display, Markdown
import datetime
display(Markdown(f"""
###### {datetime.date.today()}
"""))
```

```{python}
#| tags: [parameters]
#| include: false

import os
import pins
from pathlib import Path
from dotenv import load_dotenv
from posit.connect import Client

if Path(".env").exists():
    load_dotenv()

board = pins.board_connect(
    allow_pickle_read=True,
)

with Client() as client:
    username = client.me.username
username
```

```{python}
#| include: false
import pandas as pd
import plotly.express as px
from sklearn import metrics
import vetiver
from sklearn.base import TransformerMixin, BaseEstimator

class DenseTransformer(TransformerMixin, BaseEstimator):
    def fit(self, X, y=None, **params):
        return self

    def transform(self, X, y=None, **params):
        return X.toarray()

v = vetiver.VetiverModel.from_pin(board, f"{username}/ferry_delay")
# your pin will most likely have a version already, but we will make one here
v_meta = board.pin_meta(f"{username}/ferry_delay")
v_meta.version = '5678'
```


A [model card](https://doi.org/10.1145/3287560.3287596) provides brief, transparent, responsible reporting for a trained machine learning model.

## Model details

- Developed by PERSON AND/OR TEAM
```{python}
#| echo: false
model_desc = v.description
num_features = len(v.prototype.schema().get("properties"))

display(Markdown(f"""
- {model_desc} using {num_features} feature{'s'[:num_features^1]}.
"""))
```

- The model is a histogram gradient boosted regressor for predicting the log delay in ferry departures from terminals around the Seattle area.

- The model uses a variety of data, including weather data, details about the vessel construction, occupants and maintenance, as well as the day of the week and time of the day.

```{python}
#| echo: false
version = v_meta.version
time_created = (
    datetime.datetime
    .strptime(v_meta.created, '%Y%m%dT%H%M%SZ')
    .strftime('%Y-%m-%d %H:%M:%S')
)

display(Markdown(f"""
- Version {version} was created at {time_created}
"""))
```

- This model uses publicly available data provided by the [Washington State Department of Transportation](https://wsdot.wa.gov/) and weather data by [Open Meteo](https://open-meteo.com/)

- If you have questions about this model, please contact Michael Beigelmacher <michael.beigelmacher@posit.co>

## Intended use

- This model was built as part of the solutions for the teaching exercise of "Data Science Workflows - Python Focus" workshop at Posit Conference 2024.

- The sole purpose of this model is to teach workshop students how to use [vetiver](https://vetiver.rstudio.com/) and [Posit Connect](https://posit.co/products/enterprise/connect/) as part of a python oriented data science workflow. It should not be considered deployment ready; and any further use of this model should update the model features and conduct performace tuning. 

## Important aspects/factors

- There are no demographic, environmental or technical aspect relevant to this model.

## Metrics

- The metrics used to evaluate this model are mean squared error, mean absolute error and r2 score. 
- These metrics are computed via sklearn.metrics.
- We chose these metrics because they are simple and easy to understand

## Training data & evaluation data

- The training dataset for this model was constructed using ferry trips departure data, vessel details and weather data, all joined together.

- The training dataset for this model has the "prototype" or signature:
```{python}
#| echo: false

from rich.pretty import pprint

pprint(v.prototype.construct().schema().get("properties"))
```

- The evaluation dataset used in this model card is the same as derived for the training data, but a distrinct subset of the same source data.

- We chose this evaluation data because it was easy to work with and suited the purposes of this workshop.


## Quantitative analyses
:::{.panel-tabset}
```{python}
#| include: false
## consider using a package like Pandas Profiling for automated EDA

```
## Overall model performance

```{python}
#| echo: false

import polars as pl

uri = os.environ["DATABASE_URI_PYTHON"]

ferry_trips = pl.read_database_uri(uri=uri, query=f"SELECT * FROM {username}_test_data", engine="adbc")
```

```{python}
#| echo: false
## compute predictions for your evaluation data

ferry_trips = ferry_trips.with_columns(preds = v.model.predict(ferry_trips.drop("LogDelay")))

metric_set = [metrics.mean_absolute_error, metrics.mean_squared_error, metrics.r2_score]
for metric in metric_set:
    print(metric.__qualname__, ": ", metric(y_pred=ferry_trips["preds"], y_true=ferry_trips["LogDelay"]))
```

## Disaggregated model performance

```{python}
#| echo: false

dmp = pd.DataFrame()
for metric in metric_set:
    dmp[metric.__qualname__] = (
        ferry_trips.to_pandas()
        .groupby("Vessel")
        .apply(lambda df: metric(y_pred=df["preds"], y_true=df["LogDelay"]))
    )
dmp
```

## Visualize model performance

```{python}
performance = px.scatter(ferry_trips, x="LogDelay", y = "preds", facet_row="Vessel", trendline="ols")
performance.update_yaxes(matches=None)
performance.show()
```

## Make a custom plot

```{python}
custom = px.violin(ferry_trips, x="departing_wind_speed_10m", y = "LogDelay")
custom.show()
```

:::

## Ethical considerations

- The data for this model is publicly available.

## Caveats & recommendations

- This model does not aim to provide useful predictions and is for pedagogical purposes only.

