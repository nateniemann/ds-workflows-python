---
title: "Model Card: your model title"
output:
  html_document
---
```{python}
#| echo: false
from IPython.display import display, Markdown
import datetime
display(Markdown(f"""
###### {datetime.date.today()}
"""))
```

```{python}
#| tags: [parameters]
#| include: false

import os
import pins
from pathlib import Path
from dotenv import load_dotenv
from posit.connect import Client

if Path(".env").exists():
    load_dotenv()

board = pins.board_connect(
    allow_pickle_read=True,
)

with Client() as client:
    username = client.me.username
```

```{python}
#| include: false
import pandas as pd
import plotly.express as px
from sklearn import metrics
import vetiver
from sklearn.base import TransformerMixin, BaseEstimator

class DenseTransformer(TransformerMixin, BaseEstimator):
    def fit(self, X, y=None, **params):
        return self

    def transform(self, X, y=None, **params):
        return X.toarray()

v = vetiver.VetiverModel.from_pin(board, f"{username}/ferry_delay")
# your pin will most likely have a version already, but we will make one here
v_meta = board.pin_meta(f"{username}/ferry_delay")
v_meta.version = '5678'
```


A [model card](https://doi.org/10.1145/3287560.3287596) provides brief, transparent, responsible reporting for a trained machine learning model.

## Model details

- Developed by PERSON AND/OR TEAM
```{python}
#| echo: false
model_desc = v.description
num_features = len(v.prototype.schema().get("properties"))

display(Markdown(f"""
- A {model_desc} using {num_features} feature{'s'[:num_features^1]}.
"""))
```
- More details about how model was developed and what it is predicting
- More details on feature engineering and/or data preprocessing for model
```{python}
#| echo: false
version = v_meta.version
time_created = (
    datetime.datetime
    .strptime(v_meta.created, '%Y%m%dT%H%M%SZ')
    .strftime('%Y-%m-%d %H:%M:%S')
)

display(Markdown(f"""
- Version {version} was created at {time_created}
"""))
```

- Citation and/or license details for the model
- If you have questions about this model, please contact PERSON@ORG.ORG

## Intended use

- The primary intended uses of this model are ...
- The primary intended users of this model are ...
- Some use cases are out of scope for this model, such as ...

## Important aspects/factors

- Aspects or factors (demographic, environmental, technical) that are relevant to the context of this model are ...
- In evaluating this model, we examined aspects such as ...

## Metrics

- The metrics used to evaluate this model are ...
- These metrics are computed via ...
- We chose these metrics because ...

## Training data & evaluation data

- The training dataset for this model was ...
- The training dataset for this model has the "prototype" or signature:
```{python}
#| echo: false

from rich.pretty import pprint

pprint(v.prototype.construct().schema().get("properties"))
```

- The evaluation dataset used in this model card is ...
- We chose this evaluation data because ...


## Quantitative analyses
:::{.panel-tabset}
```{python}
#| include: false
## consider using a package like Pandas Profiling for automated EDA

```
## Overall model performance

```{python}
#| echo: false

import polars as pl

uri = os.environ["DATABASE_URI_PYTHON"]

test_data = pl.read_database_uri(uri=uri, query=f"SELECT * FROM {username}_test_data", engine="adbc")
```

```{python}
#| echo: false
## compute predictions for your evaluation data

test_data = test_data.with_columns(preds = v.model.predict(test_data.drop("LogDelay")))

metric_set = [metrics.mean_absolute_error, metrics.mean_squared_error, metrics.r2_score]
for metric in metric_set:
    print(metric.__qualname__, ": ", metric(y_pred=test_data["preds"], y_true=test_data["LogDelay"]))
```

## Disaggregated model performance

```{python}
#| echo: false

# TODO: fix
# dmp = pd.DataFrame()
# for metric in metric_set:
#     dmp[metric.__qualname__] = sacramento.groupby("type")\
#         .apply(lambda x: metric(y_pred=x["preds"], y_true=x["price"]))
# dmp
```

## Visualize model performance

```{python}
# TODO
# performance = px.scatter(sacramento, x="price", y = "preds", facet_row="type", trendline="ols")
# performance.update_yaxes(matches=None)
# performance.show()
```

## Make a custom plot

```{python}
# TODO
# custom = px.violin(sacramento, x="beds", y = "price")
# custom.show()
```

:::

## Ethical considerations

- We considered ...

## Caveats & recommendations

- This model does ...
- This model does not ...
- We recommend ...
