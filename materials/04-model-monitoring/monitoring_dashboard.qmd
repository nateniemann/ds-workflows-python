---
title: "Ferry delays: Monitoring dashboard"
format:
  dashboard:
    orientation: columns
logo: https://github.com/rstudio/vetiver-python/blob/main/docs/figures/logo.png?raw=true
output: asis
jupyter: python3
---

```{python}
#| include: false
#| tags: [parameters]

# import model and metadata
import pins
from IPython.display import display, Markdown, IFrame
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
from sklearn import metrics
from vetiver import VetiverModel, compute_metrics, plot_metrics
from sklearn.metrics import recall_score, accuracy_score
from posit.connect import Client

from sklearn.base import TransformerMixin, BaseEstimator

class DenseTransformer(TransformerMixin, BaseEstimator):
    def fit(self, X, y=None, **params):
        return self

    def transform(self, X, y=None, **params):
        return X.toarray()

with Client() as client:
    username = client.me.username

board = pins.board_connect(allow_pickle_read=True)
v = VetiverModel.from_pin(board, f"{username}/ferry_delay")
v_meta = board.pin_meta(f"{username}/ferry_delay")
days_old = datetime.today() - datetime.strptime(v_meta.created, "%Y%m%dT%H%M%SZ")
```

```{python}
## the next few lines are an example model, here is a place to
## add any code you need to import new data and make predictions

import os
import polars as pl

db_uri = os.environ["DATABASE_URI_PYTHON"]

# import new data to track performance over time
ferry_trips_new = pl.read_database_uri(
    query=f"SELECT * FROM {username}_monitoring_data;", 
    uri=db_uri, 
    engine="adbc"
)

# # make predictions
ferry_trips_new = ferry_trips_new.with_columns(
    preds = v.model.predict(ferry_trips_new.drop("LogDelay"))
)

```

```{python}
#| include: false
ferry_trips_new["LogDelay"].plot.hist()
```

```{python}
# map results
# map trips as late if delay is longer than 5 minutes (300 seconds)
ferry_trips_new = ferry_trips_new.with_columns(
    pl.col("preds") > 5.7,
    (pl.col("LogDelay") > 5.7).alias("late"),
)
```

# Model info

## Column
### Row {height="100px"}
::: {.valuebox}
`{python} v.description`

:::::: {line-height="1.5"}
`{python} v.model_name`
::::::
:::

::: {.valuebox}
Model age

`{python} days_old.days` days old
:::

### Row

Model details

- This model has the prototype:

```
`{python} v.prototype.construct().schema().get("properties")`
```

- The model was created by Michael Beigelmacher <michael.beigelmacher@posit.co>

# Model metrics

## Column
```{python}
import itables

td = timedelta(weeks = 1)
metric_set = [accuracy_score, recall_score]

metrics_df = compute_metrics(
    data = ferry_trips_new.to_pandas(),
    date_var = "Date",
    period = td,
    metric_set = metric_set,
    truth = "late",
    estimate = "preds"
  )
itables.show(metrics_df)
```

```{python}
plot_metrics(metrics_df).show()
```

## Column {.sidebar}

This tab is used to see model performance over time. In this context, _performance_ is the statistical properties of the model, eg, accuracy and recall.

You can add custom information and metrics here.

# Explore validation data

```{python}
fig = px.histogram(ferry_trips_new, x = "Vessel")
fig.show()
```

## Column {.sidebar}

Write your own code to make visualizations or tables with the new validation data, and/or the new predictions.


# API visual documentation

## Column

```{python}
from IPython.display import IFrame

api_url = os.getenv("API_URL", f"https://pub.ferryland.posit.team/{username}/ferry_delay/")

IFrame(api_url, width='100%', height=640)
```
---


## Column {.sidebar}

Interact directly with your model via its visual documentation, and get `curl` examples.
